<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<!--
  ~    Copyright 2022 OICR and UCSC
  ~
  ~    Licensed under the Apache License, Version 2.0 (the "License");
  ~    you may not use this file except in compliance with the License.
  ~    You may obtain a copy of the License at
  ~
  ~        http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~    Unless required by applicable law or agreed to in writing, software
  ~    distributed under the License is distributed on an "AS IS" BASIS,
  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~    See the License for the specific language governing permissions and
  ~    limitations under the License.
  -->

<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd"
                   context="1.14.0">
    <changeSet author="ktran (generated)" id="addInvitationStatusColumn">
        <addColumn tableName="organization_user">
            <column name="status" type="text"/>
        </addColumn>
        <sql dbms="postgresql">
            <comment>Migrate old organization user accepted column to the new invitation status column</comment>
            UPDATE organization_user SET status='ACCEPTED' where accepted=true;
            UPDATE organization_user SET status='PENDING' where accepted=false;
        </sql>
        <comment>Purposefully adding the not null constraint after migrating the accepted column so the new status column can be added without specifying a default value</comment>
        <addNotNullConstraint tableName="organization_user" columnName="status"/>
        <sql dbms="postgresql">
            <comment>Create a trigger that syncs the old accepted column with the new status column</comment>
            CREATE OR REPLACE FUNCTION insert_organization_user_sync_status_func()
            RETURNS TRIGGER
            AS
            '
            BEGIN
                IF NEW.status IS NULL THEN
                    IF NEW.accepted = true THEN
                        NEW.status := ''ACCEPTED'';
                    ELSE
                        NEW.status := ''PENDING'';
                    END IF;
                ELSEIF NEW.accepted IS NULL THEN
                    IF NEW.status = ''ACCEPTED'' THEN
                        NEW.accepted := true;
                    ELSE
                        NEW.accepted := false;
                    END IF;
                END IF;
                RETURN NEW;
            END;
            '
            LANGUAGE plpgsql;

            CREATE OR REPLACE FUNCTION update_organization_user_sync_status_func()
            RETURNS TRIGGER
            AS
            '
            BEGIN
                IF OLD.accepted IS DISTINCT FROM NEW.accepted THEN
                    IF NEW.accepted = true THEN
                        NEW.status := ''ACCEPTED'';
                    ELSE
                        NEW.status := ''PENDING'';
                    END IF;
                ELSEIF OLD.status IS DISTINCT FROM NEW.status THEN
                    IF NEW.status = ''ACCEPTED'' THEN
                        NEW.accepted := true;
                    ELSE
                        NEW.accepted := false;
                    END IF;
                END IF;
                RETURN NEW;
            END;
            '
            LANGUAGE plpgsql;

            CREATE TRIGGER insert_organization_user_sync_status_trigger
            BEFORE INSERT ON organization_user
            FOR EACH ROW
            EXECUTE PROCEDURE insert_organization_user_sync_status_func();

            CREATE TRIGGER update_organization_user_sync_status_trigger
            BEFORE UPDATE ON organization_user
            FOR EACH ROW
            WHEN (OLD.accepted IS DISTINCT FROM NEW.accepted OR OLD.status IS DISTINCT FROM NEW.status)
            EXECUTE PROCEDURE update_organization_user_sync_status_func();
        </sql>
    </changeSet>
    <changeSet author="ktran (generated)" id="addDescriptorTypeVersion">
        <createTable tableName="sourcefile_metadata">
            <column autoIncrement="true" name="id" type="BIGSERIAL">
                <constraints primaryKey="true" primaryKeyName="sourcefile_metadata_pkey"/>
            </column>
            <column name="typeversion" type="text"/>
        </createTable>
        <sql dbms="postgresql">
            insert into sourcefile_metadata (id) select id from sourcefile;
        </sql>
        <addForeignKeyConstraint baseTableName="sourcefile_metadata" baseColumnNames="id" constraintName="fk_sourcefile_metadata" referencedTableName="sourcefile" referencedColumnNames="id"/>
        <addColumn tableName="version_metadata">
            <column name="descriptortypeversions" type="varchar"/>
        </addColumn>
    </changeSet>
    <changeSet author="svonworl" id="addNotebook">
        <createTable tableName="notebook">
            <column name="id" type="BIGINT">
                <constraints nullable="false" primaryKey="true" primaryKeyName="notebook_pkey"/>
            </column>
            <column name="author" type="VARCHAR(255)"/>
            <column name="conceptdoi" type="VARCHAR(255)"/>
            <column name="dbcreatedate" type="TIMESTAMP WITHOUT TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="dbupdatedate" type="TIMESTAMP WITHOUT TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="description" type="TEXT"/>
            <column name="email" type="VARCHAR(255)"/>
            <column name="giturl" type="VARCHAR(255)"/>
            <column name="ispublished" type="BOOLEAN"/>
            <column name="lastmodified" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="lastupdated" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="licensename" type="VARCHAR(255)"/>
            <column name="topicid" type="BIGINT"/>
            <column name="checkerid" type="BIGINT"/>
            <column name="descriptortype" type="VARCHAR(255)">
                <constraints nullable="false"/>
            </column>
            <column defaultValue="n/a" name="descriptortypesubclass" type="VARCHAR(255)">
                <constraints nullable="false"/>
            </column>
            <column name="forumurl" type="VARCHAR(256)"/>
            <column defaultValue="STUB" name="mode" type="TEXT">
                <constraints nullable="false"/>
            </column>
            <column name="organization" type="VARCHAR(255)">
                <constraints nullable="false"/>
            </column>
            <column name="repository" type="VARCHAR(255)">
                <constraints nullable="false"/>
            </column>
            <column name="sourcecontrol" type="TEXT">
                <constraints nullable="false"/>
            </column>
            <column name="workflowname" type="VARCHAR(256)"/>
            <column name="actualdefaultversion" type="BIGINT"/>
            <column name="topicautomatic" type="varchar(150 BYTE)"/>
            <column name="topicmanual" type="varchar(150 BYTE)"/>
            <column defaultValue="AUTOMATIC" name="topicselection" type="varchar(32 BYTE)">
                <constraints nullable="false"/>
            </column>
        </createTable>
        <addForeignKeyConstraint baseColumnNames="actualdefaultversion" baseTableName="notebook" constraintName="fk_defaultversion_notebook" deferrable="false" initiallyDeferred="false" onDelete="NO ACTION" onUpdate="NO ACTION" referencedColumnNames="id" referencedTableName="workflowversion"/>
        <addUniqueConstraint columnNames="actualdefaultversion" constraintName="uk_actualdefaultversion_notebook" tableName="notebook"/>
        <addUniqueConstraint columnNames="checkerid" constraintName="uk_checkerid_notebook" tableName="notebook"/>
        <addForeignKeyConstraint baseColumnNames="checkerid" baseTableName="notebook" constraintName="fk_checkerid_notebook" deferrable="false" initiallyDeferred="false" onDelete="NO ACTION" onUpdate="NO ACTION" referencedColumnNames="id" referencedTableName="workflow"/>
        <sql dbms="postgresql">
            CREATE UNIQUE INDEX if not exists full_notebook_name ON notebook USING btree (sourcecontrol, organization, repository, workflowname) WHERE workflowname IS NOT NULL;
            CREATE UNIQUE INDEX if not exists partial_notebook_name ON notebook USING btree (sourcecontrol, organization, repository) WHERE workflowname IS NULL;
        </sql>
        <sql dbms="postgresql">
            CREATE TRIGGER notebook_path_trigger
            AFTER INSERT
            ON notebook
            FOR EACH ROW
            EXECUTE PROCEDURE workflow_path_insert_trigger_fnc();
            CREATE TRIGGER notebook_path_deletion_trigger
            AFTER DELETE
            ON notebook
            FOR EACH ROW
            EXECUTE PROCEDURE workflow_path_deletion_trigger_fnc();
        </sql>
    </changeSet>
    <changeSet author="svonworl" id="addNotebookEvents">
        <addColumn tableName="event">
            <column name="notebookid" type="int8"/>
        </addColumn>
        <addForeignKeyConstraint baseColumnNames="notebookid" baseTableName="event" constraintName="fkNotebookId" deferrable="false" initiallyDeferred="false" onDelete="NO ACTION" onUpdate="NO ACTION" referencedColumnNames="id" referencedTableName="notebook"/>
    </changeSet>
</databaseChangeLog>
